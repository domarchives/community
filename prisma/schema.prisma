generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  password     String?
  image        String?
  referralCode String?
  status       Boolean  @default(true)
  provider     String   @default("KRIPTOKLUB") // KRIPTOKLUB or GOOGLE
  role         String   @default("USER") // USER or ADMIN
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts               Post[]
  comments            Comment[]
  postLikes           PostLike[]
  commentLikes        CommentLike[]
  bookmarks           Bookmark[]
  accountCancellation AccountCancellation?
  perhatians          Perhatian[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  category  String
  posted    Boolean  @default(false)
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     PostLike[]
  bookmarks Bookmark[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String        @db.ObjectId
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId   String        @db.ObjectId
  post     Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId String?       @db.ObjectId
  parent   Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comment[]     @relation("ParentChild")
  likes    CommentLike[]
}

model PostLike {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model CommentLike {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ResetPasswordLink {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountCancellation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Perhatian {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoinRanking {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  uuid      String
  symbol    String
  name      String
  iconUrl   String
  marketCap String
  price     String
  change    String
  rank      Int
}
